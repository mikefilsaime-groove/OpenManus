import argparse
import asyncio
import io
import re
import sys

from app.agent.manus import Manus
from app.logger import logger
from app.schema import Message


class OutputCapture:
    def __init__(self):
        self.buffer = io.StringIO()
        self.original_stdout = sys.stdout

    def __enter__(self):
        sys.stdout = self.buffer
        return self.buffer

    def __exit__(self, exc_type, exc_val, exc_tb):
        sys.stdout = self.original_stdout


async def main():
    parser = argparse.ArgumentParser(description="Run OpenManus with a prompt")
    parser.add_argument("prompt", nargs="?", help="The prompt to send to OpenManus")
    parser.add_argument(
        "--output",
        "-o",
        help="Output file path (default: output.md)",
        default="output.md",
    )
    parser.add_argument(
        "--include-thoughts",
        action="store_true",
        help="Include agent's thinking process in output",
    )
    args = parser.parse_args()

    # If no prompt is provided via command line, print help and exit
    if not args.prompt:
        parser.print_help()
        return

    agent = Manus()
    logger.warning(f"Processing request: {args.prompt}")

    try:
        # Run the agent with the prompt
        await agent.run(args.prompt)

        # Extract the agent's thought process if requested
        thoughts = ""
        if args.include_thoughts:
            thought_messages = [
                f"### Step {i+1}\n{msg.content}\n"
                for i, msg in enumerate(agent.memory.messages)
                if msg.role == "assistant"
                and isinstance(msg.content, str)
                and msg.content.startswith("‚ú® Manus's thoughts:")
            ]
            if thought_messages:
                thoughts = (
                    "## Agent's Thinking Process\n\n"
                    + "\n".join(thought_messages)
                    + "\n\n"
                )

        # Extract the final result from the agent's memory
        final_response = ""

        # Get all assistant messages that aren't just thoughts or tool selections
        assistant_messages = [
            msg.content
            for msg in agent.memory.messages
            if msg.role == "assistant"
            and isinstance(msg.content, str)
            and not msg.content.startswith("‚ú® Manus's thoughts:")
            and not msg.content.startswith("üõ†Ô∏è Manus selected")
        ]

        # Use the last substantive message if available
        if assistant_messages:
            final_response = assistant_messages[-1]
        else:
            # Fall back to the last user-facing message of any kind
            for msg in reversed(agent.memory.messages):
                if msg.role == "assistant" and isinstance(msg.content, str):
                    final_response = msg.content
                    break

            if not final_response:
                final_response = "The agent did not produce a final response."

        # Format the content as Markdown
        markdown_content = f"""# OpenManus Output

## Prompt

{args.prompt}

## Response

{final_response}

{thoughts}
---
Generated by OpenManus
"""

        # Write to the output file
        with open(args.output, "w") as f:
            f.write(markdown_content)

        logger.info(f"Request processing completed. Output saved to {args.output}")
        print(f"Output saved to {args.output}")
    except KeyboardInterrupt:
        logger.warning("Operation interrupted.")


if __name__ == "__main__":
    asyncio.run(main())
